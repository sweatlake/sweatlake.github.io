#+TITLE: 論編碼的自私性
#+DATE: 2016-08-16
#+SETUPFILE: ~/work/Dropbox/octopress/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: 計算機
#+JEKYLL_TAGS: 計算機 編程
#+JEKYLL_PUBLISHED: true
#+JEKYLL_COMMENTS: true

自私是人類的本性，就像懶惰、貪婪等一樣根植於人的基因之中。《自私的基因》那本書將
「自私」定義爲一切有利於自身生存，不利於他人生存的行爲。這裏，我想借用此概念，將
編碼的自私性定義爲：一切有利於自身短期功能實現，不利於他人重複使的編碼。那麼這種
編碼最大的特點就是不可維護性。那麼，今日我想借用函數這個最小的程序單元來闡述編碼
的自私性的體現，我將這種自私性分爲思維、行爲和細節上的自私三種層次，下面詳細的闡
述。

{{{more}}}

首先是思維上的自私，這種自私行爲具體是指沒有想到將程序寫成函數，導致會出現很多重
複的代碼，極其不利於後期的維護。比如說下面的代碼片段，兩個函數中都需要使用最大值
的功能，但是由於沒有考慮將相同功能代碼片段寫成函數，造成了很大的代碼重複。

#+BEGIN_SRC python
def do_something1():
    test_list = [1, 3, 0, 8, 9, 2]

    max_value = test_list[0]
    for v in test_list[1:]:
        if v > max_value:  max_value = v

    method1(max_value)

def do_something2():
    test_list = ['a', 'e', 'c', 'g']

    max_value = test_list[0]
    for v in test_list[1:]:
        if v > max_value: max_value = v

    method2(max_value)
#+END_SRC

如何優化上述的代碼呢？比較好的解決方法就是將相同功能的代碼抽象成函數，有了寫成函
數的思維，基本上就過了思維上的自私，進入下一層次的自私性。

接下來是行爲上的自私，這部分的代碼會抽象成函數，但是函數實現的功能極其有限，主功
能相同的代碼只要稍微有點細節的不同就不能重新使用。比如將最大值的功能抽象成一個函
數 max。

#+BEGIN_SRC python
def max(lists):
    if not lists: return None

    max_value = lists[0]
    for v in lists:
        if v > max_value: max_value = v

    return max_value
#+END_SRC

定義完該函數之後，那麼上述的代碼就可以做如下的簡化了。
#+BEGIN_SRC python
def do_something1():
    test_list = [1, 3, 0, 8, 9, 2]
    method1(max(test_list))

def do_something2():
    test_list = ['a', 'e', 'c', 'g']
    method2(max(test_list))
#+END_SRC
經過上述的簡單抽象，函數的重複代碼就大大的減少了，但是新的需求是無窮無盡的，比如
需要一個新的功能 do_something3，代碼如下：
#+BEGIN_SRC python
def do_something3():
    test_list = [('a', 1), ('e', 0), ('c', 9), ('g', 3)]

    max_value = test_list[0]
    for v in test_list[1:]:
        if v[1] > max_value[1]: max_value = v

    method3(max_value)
#+END_SRC
那麼之前實現的最大值函數就不能使用了，這時候就會考慮如何優化 max 函數的功能，實
現上述功能。一旦有了上述的思考並進行行動，那麼就越過了行爲上的自私，進入到了細節
上的自私中。

最後一個層次是細節上的自私，這種行爲根據每個人能力的不同會有不同的表現，下面通過
寫幾個 max 函數的版本來說明這點。

第一個版本的 max 函數功能，增加了 key 關鍵字，可以讓用戶指定排序的字段。
#+BEGIN_SRC python
def max(lists, key = lambda x: x):
    if not lists: return None

    max_value = lists[0]
    for v in lists:
        if key(v) > key(max_value): max_value = v

    return max_value
#+END_SRC

第二個版本增加了可傳入參數的形式，更加方便了程序的使用。
#+BEGIN_SRC python
def max(*lists, key = lambda x: x):
    iter_lists = lists
    if len(lists) == 1:            # this is a list, set, tuple and so on
        iter_lists = lists[0]

    if not iter_lists: return None

    max_value = iter_lists[0]
    for v in iter_lists:
        if key(v) > key(max_value): max_value = v

    return max_value
#+END_SRC

除了上述兩個版本的實現之外，還有很多可以實現的額外的功能，比如說增加增加一個參數
uniq 針對並列最大值的特殊處理，還比如說，增加一個 topk 參數實現最大 k 個值返回的
功能等等，到達這個層次的程序員，隨着經驗的增加，會寫出越來越無私的代碼。

這篇博客的目地主要是想通過對一個最簡單的函數 max 的設計過程來闡述編碼中的可擴展性
和可易用性。也希望各位程序員能夠寫出越來越無私的代碼，離自私的代碼越來越遠。
